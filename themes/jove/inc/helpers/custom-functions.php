<?php
/**
 * Define custom functions for the theme.
 *
 * @package Jove
 */

 use Jove\Inc\Utils;

/**
 * Get filters data.
 *
 * Get the filters data. It returns an array with the filter information.
 *
 * @return array The filters data.
 */
function jove_get_filters_data(): array {
    $output     = [];
    $taxonomies = [
        'author' => [
            'autocomplete' => 'authors'
        ],
        'journal' => [
            'autocomplete' => 'journals'
        ]
    ];
    // $taxonomies = ['author', 'institution', 'journal'];

    // Define SVG icons for each taxonomy
    $svg_icons = [
        'author' => '<svg width="19" height="20" viewBox="0 0 19 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M18.4084 4.86263L10.0969 0.966264C9.93586 0.888849 9.73814 0.888849 9.57706 0.966264L1.26564 4.86263C1.09348 4.94288 0.991213 5.09701 1.00059 5.26106C1.01082 5.42655 1.13355 5.57285 1.31763 5.63748L1.52048 5.71135V8.39098H1.51962C1.11309 8.58629 0.914518 8.98615 1.03552 9.36471C1.1574 9.74325 1.56904 10.006 2.03951 10.006C2.50997 10.006 2.92162 9.74325 3.04264 9.36471C3.16452 8.98616 2.96594 8.58631 2.55854 8.39098V6.07916L4.63637 6.82349V8.20418L3.55142 11.1311C3.32471 11.7447 3.30682 12.3989 3.50028 13.0204C3.69375 13.6418 4.0909 14.2064 4.64744 14.6503C3.64516 15.6553 3.0946 16.9194 3.08864 18.2263V18.6596V18.6589C3.08864 18.7739 3.14318 18.884 3.2412 18.965C3.33835 19.0466 3.47046 19.0921 3.60853 19.0921H16.0757C16.2137 19.0921 16.3458 19.0466 16.443 18.965C16.541 18.884 16.5955 18.7739 16.5955 18.6589V18.2263C16.5938 16.9181 16.0424 15.6511 15.0367 14.6461C15.589 14.2008 15.9811 13.6362 16.1711 13.0155C16.3612 12.3947 16.3407 11.7427 16.1123 11.1313L15.0367 8.20436V6.82367L18.3564 5.6376C18.5396 5.57297 18.6632 5.42665 18.6734 5.26118C18.6828 5.09712 18.5805 4.94288 18.4084 4.86263ZM13.9978 6.97063V7.83639H5.6864V6.97063H13.9978ZM11.8833 13.7846L9.84213 15.4863L7.80093 13.7853V13.7846C7.97053 13.7306 8.14439 13.6845 8.31996 13.6461C9.30946 13.9814 10.4166 13.9814 11.4061 13.6461C11.551 13.6852 11.7171 13.7328 11.8833 13.7846ZM9.84213 13.0318C8.12054 13.0318 6.7254 11.8684 6.7254 10.4345V8.70228H12.9589V10.4345C12.9589 11.8685 11.5637 13.0318 9.84213 13.0318ZM4.53835 11.3912L5.57726 8.70299L5.68635 8.70228V10.4345C5.68721 11.4494 6.22243 12.4132 7.1514 13.0709C7.00055 13.1227 6.85566 13.1831 6.70993 13.2442V13.2435C6.21987 13.4558 5.76392 13.7193 5.35398 14.0276C4.50682 13.3472 4.19148 12.3272 4.53835 11.3912ZM6.819 14.1881L9.3222 16.2741V18.2264H4.12751C4.12836 16.5837 5.14598 15.0566 6.819 14.1874V14.1881ZM10.3618 18.2264V16.2741L12.8607 14.1917H12.8598C13.2374 14.3785 13.586 14.6022 13.8987 14.8586C14.9701 15.7514 15.5666 16.9644 15.5564 18.2264H10.3618ZM14.3249 14.0319C13.9295 13.7379 13.4931 13.4836 13.0261 13.2741L12.9587 13.2393C12.8181 13.1832 12.6834 13.1221 12.5377 13.0702V13.071C13.465 12.4126 13.9985 11.4488 13.9976 10.4346V8.70236H14.1323L15.1456 11.3905V11.3912C15.4934 12.3295 15.1763 13.3515 14.3249 14.0319ZM14.4135 6.10499H5.27042L2.70417 5.18737L9.84198 1.84083L16.9798 5.18737L14.4135 6.10499Z" fill="#565656"/>
<path d="M14.3258 14.0319H14.3249M14.3249 14.0319C13.9295 13.7379 13.4931 13.4836 13.0261 13.2741L12.9587 13.2393C12.8181 13.1832 12.6834 13.1221 12.5377 13.0702V13.071C13.465 12.4126 13.9985 11.4488 13.9976 10.4346V8.70236H14.1323L15.1456 11.3905V11.3912C15.4934 12.3295 15.1763 13.3515 14.3249 14.0319ZM18.4084 4.86263L10.0969 0.966264C9.93586 0.888849 9.73814 0.888849 9.57706 0.966264L1.26564 4.86263C1.09348 4.94288 0.991213 5.09701 1.00059 5.26106C1.01082 5.42655 1.13355 5.57285 1.31763 5.63748L1.52048 5.71135V8.39098H1.51962C1.11309 8.58629 0.914518 8.98614 1.03552 9.36471C1.1574 9.74325 1.56904 10.006 2.03951 10.006C2.50997 10.006 2.92162 9.74325 3.04264 9.36471C3.16452 8.98616 2.96594 8.58631 2.55854 8.39098V6.07916L4.63637 6.82349V8.20418L3.55142 11.1311C3.32471 11.7447 3.30682 12.3989 3.50028 13.0204C3.69375 13.6418 4.0909 14.2064 4.64744 14.6503C3.64516 15.6553 3.0946 16.9194 3.08864 18.2263V18.6596V18.6589C3.08864 18.7739 3.14318 18.884 3.2412 18.965C3.33835 19.0466 3.47046 19.0921 3.60853 19.0921H16.0757C16.2137 19.0921 16.3458 19.0466 16.443 18.965C16.541 18.884 16.5955 18.7739 16.5955 18.6589V18.2263C16.5938 16.9181 16.0424 15.6511 15.0367 14.6461C15.589 14.2008 15.9811 13.6362 16.1711 13.0155C16.3612 12.3947 16.3407 11.7427 16.1123 11.1313L15.0367 8.20436V6.82367L18.3564 5.6376C18.5396 5.57297 18.6632 5.42665 18.6734 5.26118C18.6828 5.09712 18.5805 4.94288 18.4084 4.86263ZM13.9978 6.97063V7.83639H5.6864V6.97063H13.9978ZM11.8833 13.7846L9.84213 15.4863L7.80093 13.7853V13.7846C7.97053 13.7306 8.14439 13.6845 8.31996 13.6461C9.30946 13.9814 10.4166 13.9814 11.4061 13.6461C11.551 13.6852 11.7171 13.7328 11.8833 13.7846ZM9.84213 13.0318C8.12054 13.0318 6.7254 11.8684 6.7254 10.4345V8.70228H12.9589V10.4345C12.9589 11.8685 11.5637 13.0318 9.84213 13.0318ZM4.53835 11.3912L5.57726 8.70299L5.68635 8.70228V10.4345C5.68721 11.4494 6.22243 12.4132 7.1514 13.0709C7.00055 13.1227 6.85566 13.1831 6.70993 13.2442V13.2435C6.21987 13.4558 5.76392 13.7193 5.35398 14.0276C4.50682 13.3472 4.19148 12.3272 4.53835 11.3912ZM6.819 14.1881L9.3222 16.2741V18.2264H4.12751C4.12836 16.5837 5.14598 15.0566 6.819 14.1874V14.1881ZM10.3618 18.2264V16.2741L12.8607 14.1917H12.8598C13.2374 14.3785 13.586 14.6022 13.8987 14.8586C14.9701 15.7514 15.5666 16.9644 15.5564 18.2264H10.3618ZM14.4135 6.10499H5.27042L2.70417 5.18737L9.84198 1.84083L16.9798 5.18737L14.4135 6.10499Z" stroke="#565656" stroke-width="0.5"/>
</svg>',
        'institution' => '<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15.8333 1.6665H7.5C6.58083 1.6665 5.83333 2.414 5.83333 3.33317V8.33317H4.16667C3.2475 8.33317 2.5 9.08067 2.5 9.99984V17.4998C2.5 17.7208 2.5878 17.9328 2.74408 18.0891C2.90036 18.2454 3.11232 18.3332 3.33333 18.3332H16.6667C16.8877 18.3332 17.0996 18.2454 17.2559 18.0891C17.4122 17.9328 17.5 17.7208 17.5 17.4998V3.33317C17.5 2.414 16.7525 1.6665 15.8333 1.6665ZM4.16667 9.99984H9.16667V16.6665H4.16667V9.99984ZM15.8333 16.6665H10.8333V9.99984C10.8333 9.08067 10.0858 8.33317 9.16667 8.33317H7.5V3.33317H15.8333V16.6665Z" fill="#323232"/>
            <path d="M9.16634 5H10.833V6.66667H9.16634V5ZM12.4997 5H14.1663V6.66667H12.4997V5ZM12.4997 8.35917H14.1663V10H12.4997V8.35917ZM12.4997 11.6667H14.1663V13.3333H12.4997V11.6667ZM5.83301 11.6675H7.49967V13.3342H5.83301V11.6675Z" fill="#323232"/>
        </svg>',
        'journal' => '<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14.9997 1.6665H4.99967C4.08301 1.6665 3.33301 2.4165 3.33301 3.33317V16.6665C3.33301 17.5832 4.08301 18.3332 4.99967 18.3332H14.9997C15.9163 18.3332 16.6663 17.5832 16.6663 16.6665V3.33317C16.6663 2.4165 15.9163 1.6665 14.9997 1.6665ZM7.49967 3.33317H9.16634V7.49984L8.33301 6.87484L7.49967 7.49984V3.33317ZM14.9997 16.6665H4.99967V3.33317H5.83301V10.8332L8.33301 8.95817L10.833 10.8332V3.33317H14.9997V16.6665Z" fill="#323232"/>
        </svg>',
    ];

    foreach ($taxonomies as $taxonomy => $taxonomy_val) {
        $output[$taxonomy] = [
            'label'         => ucfirst($taxonomy),
            'slug'          => $taxonomy,
            'svg'           => $svg_icons[$taxonomy] ?? '', // Use predefined SVG or empty string
            'autocomplete'  => $taxonomy_val['autocomplete'] ?? ''
        ];
    }

    return $output;
}

add_filter( 'rank_math/json_ld', function( $data, $jsonld ) {
    foreach ( $data as $key => $schema ) {

        if ( isset( $schema['@type'] ) && $schema['@type'] === 'ScholarlyArticle' ) { // Modify only ScholarlyArticle Schema

            $post_id = get_the_ID();

            $seo_title = RankMath\Post::get_meta( 'title', $post_id );
            // If no custom SEO title is set, fallback to the post title
            if ( empty( $seo_title ) ) {
                $seo_title = get_the_title( $post_id );
            }
            $data[$key]['name'] = Utils::remove_html_tags($seo_title);

            // Abstract
            $content = get_the_content( $post_id );
            // Step 1: Add colon and space to headings
            $content = preg_replace('/(<h3 class="wp-block-heading">)([A-Z\s]+)(<\/h3>)/', '$1$2: $3', $content);
            // Step 2: Remove all HTML tags
            $content = preg_replace('/<[^>]+>/', '', $content);
            $data[$key]['abstract'] = $content;
            $data[$key]['datePublished'] = get_the_date('c', $post_id);
            $data[$key]['url'] = get_the_permalink($post_id);
            // Get the terms associated with the post.
            $journals = get_the_terms($post_id, 'journal');
            // Check if terms exist and are not an error.
            if ($journals && !is_wp_error($journals)) {
                // Create an array to hold term names.
                $journal_names = array();
                // Loop through each term and add its name to the array.
                foreach ($journals as $journal) {
                    $journal_names[] = $journal->name;
                }
                $data[$key]['isPartOf'] = [
                    "@type" => "Periodical",
                    "name" => implode(', ', $journal_names)
                ];
            }
            // Get the author affiliations fron meta boxe,
            $authors = get_field('author_affiliation', $post_id);
            if ( is_array( $authors ) && ! empty( $authors ) ) {
                $array = [];
                foreach ($authors as $item) {
                    $affiliations = [];
                    foreach ($item['affiliation'] as $affiliation) {
                        if (is_a($affiliation, 'WP_Term')) {
                            $affiliations[] = [
                                    "@type" => "Organization",
                                    "name" => $affiliation->name
                            ];
                        }
                    }
                    if (is_a($item['author'], 'WP_Term')) {
                            $array[] = [
                            "@type" => "Person",
                            "name" => $item['author']->name,
                            "affiliation" => $affiliations
                    ];
                    }
                }
                $data[$key]['author'] = $array;
            }
            // Get the terms associated with the post.
            $keywords = get_the_terms($post_id, 'keyword');
            // Check if terms exist and are not an error.
            if ($keywords && !is_wp_error($keywords)) {
                // Create an array to hold term names.
                $keyword_names = array();
                // Loop through each term and add its name to the array.
                foreach ($keywords as $keyword) {
                    $keyword_names[] = $keyword->name;
                }
                $data[$key]['keywords'] = $keyword_names;
            }
        }
    }
    return $data;
}, 99, 2 );